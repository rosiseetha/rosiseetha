# 1. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score

# 2. Create a Synthetic Dataset
data = {
    'customerID': ['0001', '0002', '0003', '0004', '0005', '0006', '0007', '0008', '0009', '0010'],
    'gender': ['Male', 'Female', 'Female', 'Male', 'Male', 'Female', 'Female', 'Male', 'Male', 'Female'],
    'SeniorCitizen': [0, 1, 0, 0, 1, 1, 0, 0, 1, 0],
    'Partner': ['Yes', 'No', 'Yes', 'No', 'No', 'Yes', 'No', 'Yes', 'No', 'Yes'],
    'Dependents': ['No', 'No', 'Yes', 'No', 'No', 'Yes', 'No', 'Yes', 'No', 'Yes'],
    'tenure': [1, 34, 2, 45, 5, 22, 12, 40, 7, 60],
    'PhoneService': ['No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes'],
    'MultipleLines': ['No phone service', 'Yes', 'No', 'Yes', 'No phone service', 'No', 'Yes', 'Yes', 'No phone service', 'Yes'],
    'InternetService': ['DSL', 'Fiber optic', 'DSL', 'Fiber optic', 'No', 'DSL', 'Fiber optic', 'DSL', 'No', 'Fiber optic'],
    'OnlineSecurity': ['No', 'Yes', 'No', 'Yes', 'No internet service', 'Yes', 'No', 'Yes', 'No internet service', 'Yes'],
    'OnlineBackup': ['Yes', 'No', 'Yes', 'Yes', 'No internet service', 'No', 'Yes', 'Yes', 'No internet service', 'No'],
    'DeviceProtection': ['No', 'Yes', 'No', 'Yes', 'No internet service', 'No', 'Yes', 'Yes', 'No internet service', 'Yes'],
    'TechSupport': ['No', 'No', 'Yes', 'Yes', 'No internet service', 'Yes', 'No', 'Yes', 'No internet service', 'No'],
    'StreamingTV': ['No', 'Yes', 'No', 'Yes', 'No internet service', 'No', 'Yes', 'Yes', 'No internet service', 'Yes'],
    'StreamingMovies': ['No', 'Yes', 'Yes', 'Yes', 'No internet service', 'Yes', 'No', 'Yes', 'No internet service', 'Yes'],
    'Contract': ['Month-to-month', 'Two year', 'Month-to-month', 'One year', 'Month-to-month',
                 'One year', 'Month-to-month', 'Two year', 'Month-to-month', 'Two year'],
    'PaperlessBilling': ['Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No'],
    'PaymentMethod': ['Electronic check', 'Mailed check', 'Bank transfer', 'Credit card',
                      'Electronic check', 'Credit card', 'Mailed check', 'Bank transfer',
                      'Electronic check', 'Credit card'],
    'MonthlyCharges': [29.85, 56.95, 53.85, 42.30, 70.70, 59.60, 25.30, 75.25, 88.90, 65.50],
    'TotalCharges': [29.85, 1889.5, 108.15, 1840.75, 353.55, 1311.30, 303.60, 3020.25, 622.3, 3930.0],
    'Churn': ['No', 'No', 'Yes', 'No', 'Yes', 'No', 'Yes', 'No', 'Yes', 'No']
}

df = pd.DataFrame(data)

# 3. Preprocessing
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df.drop('customerID', axis=1, inplace=True)

# Convert categorical columns using LabelEncoder
label_encoders = {}
for col in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# 4. Split Data
X = df.drop('Churn', axis=1)
y = df['Churn']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 5. Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 6. Train Model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# 7. Predict
y_pred = model.predict(X_test)

# 8. Evaluate
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("ROC-AUC Score:", roc_auc_score(y_test, model.predict_proba(X_test)[:, 1]))

# 9. Visualize Confusion Matrix
plt.figure(figsize=(6, 4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# 10. Feature Importance
importance = pd.Series(model.coef_[0], index=X.columns).sort_values()
plt.figure(figsize=(10, 6))
importance.plot(kind='barh', color='teal')
plt.title("Feature Importance (Logistic Regression Coefficients)")
plt.show()
